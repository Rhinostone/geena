#!/usr/bin/env node
'use strict';

var fs      = require('fs');
var net     = require('net');
var console = lib.logger;

function Cmd(opt, runOffine) {

    var local = {};
    var lib = {};

    var init = function(opt, runOffine) {
        local.port          = opt.port;
        local.binPath       = opt.binPath;
        local.pack          = opt.pack;
        local.ginaPath      = opt.ginaPath;
        local.homedir       = opt.homedir;
        local.frameworkPath = opt.frameworkPath;

        lib = require(local.frameworkPath + "/lib");

        checkIfSettings();

        if ( typeof(runOffine) != 'undefined' ) {
            launchCmd()
        } else {
            launchFramework()
        }
    };
    

    var launchFramework = function(){

        var framework = net.createServer( function(conn) {//'connection' listener
            //feedback.
            conn.once('end', function() {
                console.warn('CLI task completed')
            });

            //Receiving.
            conn.on('data', function(data) {

                var argv = JSON.parse( data.toString() );

                console.debug( 'CMD received "'+ argv.join(' ') +'"' );

                argv[0] = process.execPath;
                argv[1] = argv[1] + '/bin/cli';
                //Launch.
                lib.cmd.load({
                    isOnlineCommand : true,
                    ginaPath : local.ginaPath,
                    frameworkPath : local.frameworkPath,
                    pack : local.pack,
                    argv : argv,
                    client : conn,
                    homedir : local.homedir
                })
            })
        });


        framework.on('error', function(err) {
            if (err.code === 'EADDRINUSE') {
                if (process.argv[2] == 'framework:start') {
                    var shortVersion = getEnvVar('GINA_SHORT_VERSION')
                        , rundir = require( getEnvVar('GINA_HOMEDIR') +'/'+ shortVersion +'/settings.json').rundir
                        , path = _( rundir +'/gina')
                        , pids = fs.readdirSync( path )
                        , i = 0
                        , str = ''
                        , pid = undefined;

                    while(i< pids.length) {
                        str = fs.readFileSync(_(path +'/'+ pids[i])).toString();
                        if ( str === 'gina' ) {
                            pid = pids[i];
                            break
                        }
                        ++i
                    }
                    console.warn('Framework already running: [ '+ pid+' ]')
                } else {

                }
            } else {
                console.emerg('Could not start framework. ', err.stack)
            }
        });

        framework.listen(local.port, function() { //'listening' listener

            //First time launch.
            lib.cmd.load({
                ginaPath : local.ginaPath,
                frameworkPath : local.frameworkPath,
                pack : local.pack,
                argv : process.argv,
                client : process.stdout,
                isFromFramework : true,
                homedir : local.homedir,
                task : {
                    topic : "framework",
                    action : "start"
                }
            })
        })
    };

    var launchCmd = function() {
        var cmd = process.argv[2].split(':')
            , topic = cmd[0]
            , action = cmd[1];


        lib.cmd.load({
            ginaPath : local.ginaPath,
            frameworkPath : local.frameworkPath,
            pack : local.pack,
            argv : process.argv,
            client : process.stdout,
            isFromFramework : true,
            homedir : local.homedir,
            task : {
                topic : topic,
                action : action
            }
        })
    };

    var checkIfSettings = function() {

        var main            = require( getEnvVar('GINA_HOMEDIR') + '/main.json' )
            , version       = getEnvVar('GINA_VERSION')
            , home          = getEnvVar('GINA_HOMEDIR')
            , shortVersion  = getEnvVar('GINA_SHORT_VERSION')
            , env           = getEnvVar('GINA_ENV') || main['dev_env'][shortVersion]
            , source        = getEnvVar('GINA_DIR') + '/resources/home/settings.json'
            , target        = home +'/'+ shortVersion +'/settings.json'
            //, settings = {}
            , data          = {}
        ;

        if ( !fs.existsSync(target) ) {
            try {
                var data = require(source);
                data.version = version;
                data.env = env;
                data.tmpdir = _( getTmpDir() );
                data.rundir = _( getRunDir() );
                data.logdir = _( getLogDir() );

                var env = require(home + '/main.json').dev_env;
                var dic = {
                    'version'       : getEnvVar('GINA_VERSION'),
                    'dev_env'       : env,
                    'node_version'  : process.versions.node
                };
                data = whisper(dic, data);
                //settings = data;

                lib.generator.createFileFromDataSync(
                    data,
                    target
                )
            } catch (err) {
                console.error(err.stack);
                process.exit(1)
            }
        }
    }

    init(opt, runOffine)
};

module.exports = Cmd