#!/usr/bin/env node
'use strict';

var fs  = require('fs');
var net = require('net');


var isWin32 = (process.platform === 'win32') ? true : false;
var binPath = __dirname;
var ginaPath = (binPath.replace(/\\/g, '/')).replace('/bin', '');
ginaPath = (isWin32) ? ginaPath.replace(/\//g, '\\') : ginaPath;
var help = require(ginaPath + '/utils/helper.js');
// loading pack
var pack = ginaPath + '/package.json';
pack =  (isWin32) ? pack.replace(/\//g, '\\') : pack;

try {
    var packObj = require(pack);
    var version =  getEnvVar('GINA_VERSION') || packObj.version;
    var frameworkPath = ginaPath + '/framework/v' + version;

    require(frameworkPath + '/lib');
    //Loading logger.
    var console = lib.logger;

    if ( !fs.existsSync(frameworkPath) ) {
        console.alert('Could not find version ' + version + '.\nFirst try:\n$ gina framework:install ' + version);
        process.exit(1)
    }

    try {
    } catch (err) {
        console.alert("Package.json is missing or corrupted.\n", err.stack);
        process.exit(1)
    }
} catch (err) {
    process.stdout.write('gina: could not load [ ' + pack + ' ]\n' + err.stack);
    process.exit(1)
}


/**if ( /gina\-debug$/.test(process.argv[1]) ) {
    setEnvVar('GINA_DEBUG', true);
    process.argv.splice(1, 0, "--debug-brk=5656");
    console.error(process.argv);
}*/

filterArgs();
//check for $HOME path, alert if empty.
var home = getUserHome();
if (!home) {
    console.error('No ' + ((isWin32) ? 'USERPROFILE' : 'HOME') + ' path found.')
} else {
    setEnvVar('GINA_HOME', home);
    setEnvVar('GINA_DIR', ginaPath);
    home = getEnvVar('GINA_HOMEPATH') || home + '/.gina'
}
setEnvVar('GINA_IS_WIN32', isWin32, true);


/**
 * Checking project config
 *
 * */
var port = 8124;

var allowedOffline = [
    'dev:',
    'env:',
    'framework:',
    'project:',
    'bundle:',
    '--', //options or other aliases.
    '-' //options or other aliases.
];

if ( process.argv.count() < 3 ) {
    if (isWin32)
        console.log('Check out the help section:\n$ gina -h')
    else
        console.log('Check out the manpage:\n$ man gina')

    process.exit(0)
}

if (process.argv[2].indexOf(':') < 0) {
    process.argv[2] = 'framework:' + process.argv[2];
}

if (
    typeof(process.argv[2]) != 'undefined' &&
    process.argv[2] === 'start'||
    typeof(process.argv[2]) != 'undefined' &&
    process.argv[2] === 'framework:start'
) {

    //Start framework & pass service options.
    require(binPath + '/cmd')({
        binPath : binPath,
        ginaPath : ginaPath,
        frameworkPath : frameworkPath,
        homedir : home,
        port: port,
        pack : pack
    })

} else if (
    typeof(process.argv[2]) != 'undefined'
    && allowedOffline.indexOf( (process.argv[2].split(':')[0] + ':')) > -1
    || process.argv[2].substr(0, 2) === '--'
    || process.argv[2].substr(0, 1) === '-'
) {

    require(binPath + '/cmd')({
        binPath : binPath,
        ginaPath : ginaPath,
        frameworkPath : frameworkPath,
        homedir : home,
        port: port,
        pack : pack
    }, true)

} else if ( typeof(process.argv[2]) != 'undefined'
            && allowedOffline.indexOf( (process.argv[2].split(':')[0] + ':')) < 0
) {
    // check allowedOffline ;)
    process.argv.splice(0,2);
    console.error( '[ $ gina ' + process.argv.join(' ') + ' ] is not a valid command line' )
} else {

    //Connect to framework.
    var client = net.connect({port: port},
        function() {
            //Forwarding cmd.
            client.write( JSON.stringify(process.argv) );
            console.log('Gina Command Line Tool\r\n')
        }
    );

    client.on('data', function(data) {
        //Acknowledging ready state.
        console.notice( data.toString() + '\n');
        client.end()
    });

    //client end event.
    client.on('end', function() {
        process.exit(0)
    });

    client.on('error', function(err) {
        if (isWin32) {
            console.emerg('If [ gina ] not started, try to start framework as Administrator :\n$ gina start')
        } else {
            console.emerg('If [ gina ] not started, try to start framework:\n$ [sudo] gina start')
        }
        process.exit(1)
    })
}