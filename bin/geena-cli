#!/usr/bin/env node

/*
 * This file is part of the geena package.
 * Copyright (c) ${year} Rhinostone <geena@rhinostone.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

var fs  = require('fs');
var net = require('net');
//var child = require('child_process');


var executionPath = process.cwd();
var binPath = __dirname;
var geenaPath = (binPath.replace(/\\/g, '/')).replace('/bin', '');
geenaPath = (process.platform == 'win32') ? geenaPath.replace(/\//g, '\\') : geenaPath;

var help = require(geenaPath + '/lib/utils/helper.js');
help.filterArgs();

//check for $HOME path, alert if empty
var home = help.getUserHome();
if (!home) {
    console.error('No ' + ((process.platform == 'win32') ? 'USERPROFILE' : 'HOME') + ' path found.' )
} else {
    home = home + '/.geena'
}


var pack = geenaPath + '/package.json';
pack =  (process.platform == 'win32') ? pack.replace(/\//g, '\\') : pack;


try {
    pack = require(pack)
} catch (err) {
    console.log('geena: could not find "' + pack + '"');
    process.exit(1)
}

/**
 * Checking project config
 *
 * */
//var conf = help.loadProjectConfiguration(home);

var port = 8124;

if (
    typeof(process.argv[2]) != 'undefined'
        && process.argv[2] == "start"
        && process.argv.length < 4
    || typeof(process.argv[2]) != 'undefined'
        && process.argv[2] == 'framework:start'
) {
    //Start framework & pass service options.
    require(binPath + '/geena-cmd')({
        binPath : binPath,
        geenaPath : geenaPath,
        home : home,
        port: port,
        pack : pack
    }, help)
} else if (typeof(process.argv[2]) != 'undefined' && process.argv[2] == '.') {
    //redirect to geena path: __dirname.
    console.log('geena-cli is path: ', __dirname);
    console.log('exec path is: ', executionPath );
} else {

    //Connect to framework.
    var client = net.connect({port: port},
        function() {
            //Forwarding cmd.
            client.write( JSON.stringify(process.argv) )
            console.log('Geena Command Line Tool\r\n');
            //client.write('world!\r\n')
        }
    );
    client.on('data', function(data) {
        //Acknowledging ready state.
        console.log( data.toString() + '\n');
        client.end()
    });

    //client end event.
    client.on('end', function() {
        //console.log('geena: client disconnected')
        process.exit(0)
    });

    client.on('error', function(err) {
        console.log('If not started, try to start framework with:\n$ geena start')
        process.exit(1)
    })
}


/**
var args = process.argv ;
var node = args.shift(); // node
var file = args.shift(); // this file

var join = require('path').join;
var sprintf = require('util').format;
var cp = require('child_process');
var executable = join(__dirname, sprintf('geena-%s', process.argv.shift()));

args.unshift(node);
args.unshift(file);

require(executable);

*/

//check for .geena folder, and create if empty
//if ( !fs.existsSync(home) ) {
//    try {
//
//    } catch (err) {
//        console.error('Could not create .geena folder '+ '\n' + err.stack);
//    }
//}

//get execution path

//Don't forget to put'em in utils.helpers

//function getUserHome() {
//    return process.env[(process.platform == 'win32') ? 'USERPROFILE' : 'HOME']
//}

//function filterArgs() {
//    var evar = "";
//    for (var a in process.argv) {
//        if ( process.argv[a].indexOf('--') > -1 ) {
//            evar = ( process.argv[a].replace(/--/, '') ).split(/=/);
//            evar[0] = 'GEENA_' + evar[0].toUpperCase();
//            process.env['' + evar[0]] = evar[1];
//            //Remove from argv.
//            process.argv.splice(a+1, 1)
//        }
//    }
////    console.log("version: ", getEnvVar('GEENA_VERSION'));
////    console.log('debug ', process.env);
////    process.exit(0)
//}

//function getEnvVar(key){
//    if ( typeof(process.env[key]) != "undefined" && process.env[key] != "") {
//        return process.env[key]
//    }
//    return undefined
//}