#!/usr/bin/env node

/*
 * This file is part of the geena package.
 * Copyright (c) ${year} Rhinostone <geena@rhinostone.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
var Cmd;

var fs  = require('fs');
var net = require('net');

Cmd = function(opt) {

    var self = this;

    var init = function(opt){
        self.port       = opt.port;
        self.binPath    = opt.binPath;
        self.package    = opt.pack;
        self.geenaPath  = opt.geenaPath;
        self.home       = opt.home;

        start()
    };

    var start = function(){

        var version = self.package.version;
        var frameworkPath = self.geenaPath + '/node_modules/geena.framework/' + version;

        //var modulesPath = self.geenaPath + '/node_modules';
        //require(frameworkPath + '/node_modules/colors');
        var utils = require(frameworkPath + "/core/utils");

        try {
            var pack = require(frameworkPath + "/package.json")
        } catch (err) {
            console.log("geena: ", err.stack);
            process.exit(1)
        }

        var framework = net.createServer( function(conn){ //'connection' listener
            //feedback.
            conn.on('end', function(){
                console.log('geena: client disconnected')
            });

            //Receiving.
            conn.on('data', function(data){

                console.log('geena: received ', data.toString() );

                //Launch.
                utils.cmd.load({
                    geenaPath : frameworkPath,
                    pack : pack,
                    argv : data.toString(),
                    client : conn,
                    homePath : self.home
                })
            })

            //conn.write('geena: connection established\r\n');
            //conn.write('Geena Command Line Tool\r\n');
            //conn.pipe(conn)
        });


        framework.on('error', function(err){
            if (err.code == 'EADDRINUSE') {
                console.log('geena: framework is already running.')
            } else {
                console.log('geena: could not start framework. ', err.stack)
            }
        });

        framework.listen(self.port, function(){ //'listening' listener
            console.log('geena: framework started')
        })
    };

    init(opt)
};

module.exports = Cmd